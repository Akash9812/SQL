What is SQL?
SQL is querying language aimed to manage Relational Databases

SQL programming can be used to perform multiple actions on data such as       
1.Quering 2.Inserting 3.Updating 4.Deleting 5.Extracting.


=> Why we use SQL
It is open source, support large databases,Customizable.
SQL is faster and relibale because we can extract that much
amount of information which we actually need for the analysis so we overcome the memory loss problem. 
and it is relible because it stores data in various data files.
    
    
Data Types
Numeric -> (INT,FLOAT,DECIMAL,REAL)
    
Character-string -> (CAHR(n),VARCHAR(n),CLOB
   
Boolean -> (TRUE,FALSE,UNKNOWN)
   
Data and Time -> (DATE, TIME)
 
====================================================   
 NOW WE MOVE FORWARD TO DO SOME OPERATIONS   
    
 Create database called bikes
 syntax: CREATE DATABASE bikes;
    
 Use that database for further process 
 syntax: USE bikes;
    
 Now we have to create tables in the database 
 syntax:
    CREATE TABLE bikes(
    -> id int unsigned NOT NULL auto_increment,
    -> bikename varchar(50) NOT NULL,
    -> fuel_type varchar(10) NOT NULL,
    -> avarage int(100),
    -> PRIMARY KEY(id));
    
 Here we define primary key (id) because it has unique values.
 #varchar means the length of character.
    
    
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| abcd               |
| cars               |
| demo1              |
| fake               |
| information_schema |
| ipl                |
| mydb               |
| mysql              |
| performance_schema |
| practice           |
| sakila             |
| sys                |
| world              |
+--------------------+
13 rows in set (0.00 sec)

WE USE DATABASES WHICH IS ALREADY CREATED

mysql> use fake;       
Database changed
mysql> show tables;
+----------------+
| Tables_in_fake |
+----------------+
| bikes          |
+----------------+


WE HAVE ALREADY CREATED TABLES IN BIKES SO WE DO ENTER VALUES IN IT AS FOLLOWS  

mysql> INSERT INTO bikes(bikename,fuel_type,avarage)
    -> values("NS200","Petrol","42");
Query OK, 1 row affected (0.40 sec)

mysql> select * from bikes;
+----+----------+-----------+---------+
| id | bikename | fuel_type | avarage |
+----+----------+-----------+---------+
|  1 | NS200    | Petrol    |      42 |
+----+----------+-----------+---------+
1 row in set (0.03 sec)

mysql> INSERT INTO bikes(bikename,fuel_type,avarage)
    -> values("FZ","Petrol","48");
Query OK, 1 row affected (0.08 sec)

mysql> INSERT INTO bikes(bikename,fuel_type,avarage)
    -> values("RE","Petrol","40");
Query OK, 1 row affected (0.11 sec)

mysql> select * from bikes;
+----+----------+-----------+---------+
| id | bikename | fuel_type | avarage |
+----+----------+-----------+---------+
|  1 | NS200    | Petrol    |      42 |
|  2 | FZ       | Petrol    |      48 |
|  3 | RE       | Petrol    |      40 |
+----+----------+-----------+---------+
3 rows in set (0.00 sec)


WHEN WE WANT TO CHANGE SOME VALUE OR UPDATE ANY VALUE WE USE UPDATE SYNTAX 

mysql> UPDATE bikes SET avarage = "30" WHERE id = 1;      
Query OK, 1 row affected (0.10 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from bikes;
+----+----------+-----------+---------+
| id | bikename | fuel_type | avarage |
+----+----------+-----------+---------+
|  1 | NS200    | Petrol    |      30 |
|  2 | FZ       | Petrol    |      48 |
|  3 | RE       | Petrol    |      40 |
+----+----------+-----------+---------+
3 rows in set (0.04 sec)

WE WANT TO ADD OR DROP SOME COLUMNS THEN WE USE ALTER SYNTAX IN SQL

mysql> Select * from bikes;
+----+----------+-----------+---------+
| id | bikename | fuel_type | avarage |
+----+----------+-----------+---------+
|  1 | NS200    | Petrol    |      30 |
|  2 | FZ       | Petrol    |      48 |
|  3 | RE       | Petrol    |      40 |
+----+----------+-----------+---------+
3 rows in set (0.00 sec)

mysql> alter table bikes
    -> add color varchar(20) not null
    -> after fuel_type,
    -> add comfart varchar(10) not null
    -> after avarage;
Query OK, 0 rows affected (2.92 sec)
Records: 0  Duplicates: 0  Warnings: 0

WE ADD COLOR AND COMFART COLUMN.

mysql> select * from bikes;            
+----+----------+-----------+-------+---------+---------+
| id | bikename | fuel_type | color | avarage | comfart |
+----+----------+-----------+-------+---------+---------+
|  1 | NS200    | Petrol    |       |      30 |         |
|  2 | FZ       | Petrol    |       |      48 |         |
|  3 | RE       | Petrol    |       |      40 |         |
+----+----------+-----------+-------+---------+---------+
3 rows in set (0.00 sec)

    
WE DROP THE COLOR COLUMN BY USING DROP SYNTAX    
    
mysql> alter table bikes                
    -> drop color;
Query OK, 0 rows affected (2.27 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> select * from bikes;   
+----+----------+-----------+---------+---------+
| id | bikename | fuel_type | avarage | comfart |
+----+----------+-----------+---------+---------+
|  1 | NS200    | Petrol    |      30 |         |
|  2 | FZ       | Petrol    |      48 |         |
|  3 | RE       | Petrol    |      40 |         |
+----+----------+-----------+---------+---------+
3 rows in set (0.00 sec)  
    
RENAME THE COLUMN comfart to seating_comfart    
    
 mysql> alter table bikes                        
    -> change comfart Seating_comfart varchar(20) not null;
Query OK, 0 rows affected (0.52 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> select * from bikes;
+----+----------+-----------+---------+-----------------+
| id | bikename | fuel_type | avarage | Seating_comfart |
+----+----------+-----------+---------+-----------------+
|  1 | NS200    | Petrol    |      30 |                 |
|  2 | FZ       | Petrol    |      48 |                 |
|  3 | RE       | Petrol    |      40 |                 |
+----+----------+-----------+---------+-----------------+
3 rows in set (0.04 sec)
   
    
IMPORTING ANOTHER DATASET CALLED ATTRIION

    mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| abcd               |
| attrition          |
| cars               |
| demo1              |
| fake               |
| information_schema |
| ipl                |
| mydb               |
| mysql              |
| performance_schema |
| practice           |
| sakila             |
| sys                |
| world              |
+--------------------+
14 rows in set (0.00 sec)

mysql> use attrition;
Database changed
mysql> select * from attrition01;
    
WHEN WE WANT TO KNOW ANY PERTICULAR COLUMN CONTAIN HOW MANY UNIQUE VALUE THEN WE USE DISTINCT FUNCTION.

mysql> select distinct BusinessTravel from attrition01;   #### Here BusinessTravel column has three categories 
+-------------------+
| BusinessTravel    |
+-------------------+
| Travel_Rarely     |
| Travel_Frequently |
| Non-Travel        |
+-------------------+
====================================================================================================================
NOW WE SEE SOME INTERESTING PART IN SQL WHICH IS JOIN.

JOINS IN SQL

INNER JOIN : returns rows when there is a match in both tables.
LEFT JOIN  : returns all rows from the left table, even if there are no matches in the right table.
RIGHT JOIN : returns all rows from the right table, even if there are no matches in the left table    
FULL OUTER JOIN: The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) 
                 or right (table2) table records.
                 
                 
WE SEE ONE BY ONE BY DOING SIMPLE OPERATION.

mysql> select*from student;
+---------+--------+---------+-------+
| roll_no | name   | sub     | grade |
+---------+--------+---------+-------+
|       1 | ram    | eng     | A     |
|       2 | sham   | hindi   | A     |
|       3 | som    | hindi   | A     |
|       4 | ravi   | marathi | B     |
|       5 | dipak  | hindi   | A     |
|       6 | mahesh | maths   | C     |
+---------+--------+---------+-------+
6 rows in set (0.00 sec)

mysql> select*from students1;
+---------+--------+-----------+-------+
| roll_no | name   | sub       | grade |
+---------+--------+-----------+-------+
|       1 | sanket | stat      | A     |
|       2 | shrya  | mvs       | B     |
|       3 | vijay  | infarence | C     |
|       4 | akash  | maths     | c     |
|       5 | akshay | hindi     | B     |
|       6 | viraj  | marathi   | B     |
+---------+--------+-----------+-------+
6 rows in set (0.00 sec)

WE TAKE INNER JOIN PERFORM ON BOTH THE DATASETS STUDENTS1 AND STUDENT

=> INNER JOIN 

WE SEE WHICH RECORD SATISFYING THE CONDITION THAT RECORDS ARE RECORED IN THE TABLE.

mysql> select * from student
    -> INNER JOIN students1
    -> on student.sub = students1.sub;
+---------+--------+---------+-------+---------+--------+---------+-------+
| roll_no | name   | sub     | grade | roll_no | name   | sub     | grade |
+---------+--------+---------+-------+---------+--------+---------+-------+
|       6 | mahesh | maths   | C     |       4 | akash  | maths   | c     |
|       5 | dipak  | hindi   | A     |       5 | akshay | hindi   | B     |
|       3 | som    | hindi   | A     |       5 | akshay | hindi   | B     |
|       2 | sham   | hindi   | A     |       5 | akshay | hindi   | B     |
|       4 | ravi   | marathi | B     |       6 | viraj  | marathi | B     |
+---------+--------+---------+-------+---------+--------+---------+-------+


=> RIGHT JOINT 

HERE WE GET ALL RECORDS FROM RIGHT TABLE(STUDENTS1) AND SOME OF THE RECORED FROM LEFT TABLE (STUDENT) WHICH ARE SAME OR WE SAY THAT THESE RECORDS SATISFYING THE CONDITION 
AND NULL VALUES REPRESNTS THESE RECOREDS WERE NOT SATISFIED THE CONDITION.

mysql> select * from student
    -> RIGHT JOIN students1
    -> on student.sub = students1.sub;
+---------+--------+---------+-------+---------+--------+-----------+-------+
| roll_no | name   | sub     | grade | roll_no | name   | sub       | grade |
+---------+--------+---------+-------+---------+--------+-----------+-------+
|    NULL | NULL   | NULL    | NULL  |       1 | sanket | stat      | A     |
|    NULL | NULL   | NULL    | NULL  |       2 | shrya  | mvs       | B     |
|    NULL | NULL   | NULL    | NULL  |       3 | vijay  | infarence | C     |
|       6 | mahesh | maths   | C     |       4 | akash  | maths     | c     |
|       5 | dipak  | hindi   | A     |       5 | akshay | hindi     | B     |
|       3 | som    | hindi   | A     |       5 | akshay | hindi     | B     |
|       2 | sham   | hindi   | A     |       5 | akshay | hindi     | B     |
|       4 | ravi   | marathi | B     |       6 | viraj  | marathi   | B     |
+---------+--------+---------+-------+---------+--------+-----------+-------+
8 rows in set (0.00 sec)


=> LEFT JOIN

HERE WE GET ALL RECORDS FROM LEFT TABLE(STUDENT) AND SOME OF THE RECORED FROM RIGHT TABLE (STUDENTS1) WHICH ARE SAME OR WE SAY THAT THESE RECORDS SATISFYING THE CONDITION 
AND NULL VALUES REPRESNTS THESE RECOREDS WERE NOT SATISFIED THE CONDITION.

mysql> select * from student
    -> LEFT JOIN students1
    -> on student.sub = students1.sub;
+---------+--------+---------+-------+---------+--------+---------+-------+
| roll_no | name   | sub     | grade | roll_no | name   | sub     | grade |
+---------+--------+---------+-------+---------+--------+---------+-------+
|       1 | ram    | eng     | A     |    NULL | NULL   | NULL    | NULL  |
|       2 | sham   | hindi   | A     |       5 | akshay | hindi   | B     |
|       3 | som    | hindi   | A     |       5 | akshay | hindi   | B     |
|       4 | ravi   | marathi | B     |       6 | viraj  | marathi | B     |
|       5 | dipak  | hindi   | A     |       5 | akshay | hindi   | B     |
|       6 | mahesh | maths   | C     |       4 | akash  | maths   | c     |
+---------+--------+---------+-------+---------+--------+---------+-------+












